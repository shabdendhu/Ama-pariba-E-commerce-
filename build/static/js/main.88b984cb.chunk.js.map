{"version":3,"sources":["constants/storage-keys.js","reducer.js","Component/templet/StateProvider.js","constants/authorization-constants.js","router.js","Component/templet/skeleton.js","reducer/authorization.js","reducer/index.js","store/index.js","Component/templet/MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["user_info","loggedin_as","initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","newBasket","index","findIndex","basketItem","id","splice","StateContext","createContext","StateProvider","children","Provider","value","useReducer","useStateValue","useContext","USER_LOGGEDIN","LOGOUT","Checkout","lazy","MainCategory","routes","path","exact","component","PageSkeleton","Fragment","height","count","Initialstate","is_loggedin","localStorage","getItem","JSON","parse","authorization","payload","mainReducer","combineReducers","store","createStore","MainComponent","Suspense","fallback","map","route","idx","render","props","from","to","App","useEffect","document","body","style","background","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88b984cb.chunk.js","sourcesContent":["export const user_info='user_info';\nexport const loggedin_as='loggedin_as';","export const initialState = {\n\tbasket: [],\n\tuser: null,\n};\nexport const getBasketTotal = (basket) =>\n\tbasket.reduce((amount, item) => item.price + amount, 0);\nconst reducer = (state, action) => {\n\t// console.log(action);\n\tswitch (action.type) {\n\t\tcase \"SET_USER\":\n\t\t\treturn { ...state, user: action.user };\n\t\tcase \"ADD_TO_BASKET\":\n\t\t\t//logic to adding item to basket\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbasket: [...state.basket, action.item],\n\t\t\t};\n\t\tcase \"REMOVE_FROM_BASKET\":\n\t\t\t//logic to rempove from basket\n\t\t\tlet newBasket = [...state.basket];\n\t\t\tconst index = state.basket.findIndex(\n\t\t\t\t(basketItem) => basketItem.id === action.id\n\t\t\t);\n\t\t\tif (index >= 0) {\n\t\t\t\tnewBasket.splice(index, 1);\n\t\t\t}\n\t\t\t// else {\n\t\t\t//   console.log.warn(\n\t\t\t//     `cant remove product (id: ${action.id}) as its ont in basket`\n\t\t\t//   );\n\t\t\t// }\n\t\t\treturn { ...state, basket: newBasket };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","export const USER_LOGGEDIN = \"USER_LOGGEDIN\";\nexport const LOGOUT = \"LOGOUT\";\n","import { lazy } from \"react\";\nconst Home = lazy(() => import(\"./Component/templet/home\"));\nconst Checkout = lazy(() => import(\"./pages/checkout/Checkout\"));\nconst MainCategory = lazy(() => import(\"./pages/category.js/index\"));\nconst Login = lazy(() => import(\"./Component/login/login\"));\nconst About = lazy(() => import(\"./pages/about/about\"));\nconst shopByCategory = lazy(() => import(\"./pages/shop/show-items-by-id\"));\nconst ShopByRecipes = lazy(() => import(\"./pages/shop/shop-by-recipes\"));\nconst ShopByItems = lazy(() => import(\"./pages/shop/shop-by-items\"));\nconst Productdetails = lazy(() => import(\"./Component/templet/Productdetails\"));\nconst RecipesDetails = lazy(() => import(\"./Component/templet/RecipesDetails\"));\nconst searchresult = lazy(() => import(\"./pages/shop/searchresult\"));\nconst routes = [\n\t{ path: \"/\", exact: true, component: MainCategory },\n\t{ path: \"/checkout\", exact: true, component: Checkout },\n\t{ path: \"/category\", exact: true, component: MainCategory },\n\t{ path: \"/login\", exact: true, component: Login },\n\t{ path: \"/about\", exact: true, component: About },\n\t{ path: \"/show-items-with-id\", exact: true, component: shopByCategory },\n\t{ path: \"/shop-by-recipes\", exact: true, component: ShopByRecipes },\n\t{ path: \"/shop-by-items\", exact: true, component: ShopByItems },\n\t{ path: \"/product-details\", exact: true, component: Productdetails },\n\t{ path: \"/recipe-details\", exact: true, component: RecipesDetails },\n\t{ path: \"/search-results\", exact: true, component: searchresult },\n];\n\nexport default routes;\n","import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nconst PageSkeleton = () => {\n  return (\n    <React.Fragment>\n      <Skeleton height={70} />\n      <br />\n      <br />\n      <br />\n      <Skeleton count={10} />\n      <br />\n      <br />\n      <br />\n      <Skeleton count={10} />\n    </React.Fragment>\n  );\n};\nexport default PageSkeleton;\n","import { USER_LOGGEDIN } from \"../constants/authorization-constants\";\nimport { user_info, loggedin_as } from \"../constants/storage-keys\";\n\nconst Initialstate = {\n\tis_loggedin: localStorage.getItem(user_info) !== null ? true : false,\n\tloggedin_as: localStorage.getItem(loggedin_as),\n\tuser_info:\n\t\tlocalStorage.getItem(user_info) !== null\n\t\t\t? JSON.parse(localStorage.getItem(user_info))\n\t\t\t: null,\n};\nconst authorization = (state = Initialstate, action) => {\n\tswitch (action.type) {\n\t\tcase USER_LOGGEDIN:\n\t\t\tstate = {\n\t\t\t\t...state,\n\t\t\t\tis_loggedin: action.payload.is_loggedin,\n\t\t\t\tloggedin_as: action.payload.loggedin_as,\n\t\t\t\tuser_info: action.payload.user_info,\n\t\t\t};\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstate = { ...state };\n\t}\n\treturn state;\n};\nexport default authorization;\n","import { combineReducers } from \"redux\";\nimport authorization from \"./authorization\";\nexport const mainReducer = combineReducers({\n\tauthorization,\n});\nexport default mainReducer;\n","import { createStore } from \"redux\";\nimport { mainReducer } from \"../reducer/index\";\nconst store = createStore(mainReducer);\nexport default store;\n","import React, { useEffect } from \"react\";\nimport routes from \"../../router\";\nimport PageSkeleton from \"./skeleton\";\nimport { Provider } from 'react-redux'\n\nimport store from \"../../store/index\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nconst MainComponent = () => {\n  return (\n    <Provider store={store}>\n    <React.Suspense fallback={<PageSkeleton />}>\n      <Router>\n        <Switch>\n          {routes.map((route, idx) => {\n            return route.component ? (\n              <Route\n                key={idx}\n                path={route.path}\n                exact={route.exact}\n                render={props => <route.component {...props} />}\n              />\n            ) : null;\n          })}\n          <Redirect from=\"/\" to=\"/\" />\n        </Switch>\n      </Router>\n    </React.Suspense>\n    </Provider>\n\n  );\n};\nexport default MainComponent;\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport MainComponent from \"./Component/templet/MainComponent\";\n\nfunction App() {\n\tuseEffect(() => {\n\t\tdocument.body.style.background = \"#efefef\";\n\t}, []);\n\treturn <MainComponent />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match( \n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer, { initialState } from \"./reducer\";\n// import { StateProvider } from \"./StateProvider\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./Component/templet/StateProvider\";\nimport store from \"./store\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider initialState={initialState} reducer={reducer} store={store}>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}